// source: TCProto.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.TCProto.AnimateAction', null, global);
goog.exportSymbol('proto.TCProto.BubbleAction', null, global);
goog.exportSymbol('proto.TCProto.ChatAction', null, global);
goog.exportSymbol('proto.TCProto.CreatePlayerReq', null, global);
goog.exportSymbol('proto.TCProto.FromGame', null, global);
goog.exportSymbol('proto.TCProto.IgnoreHumanInputReq', null, global);
goog.exportSymbol('proto.TCProto.IntVector', null, global);
goog.exportSymbol('proto.TCProto.KeyPlotAction', null, global);
goog.exportSymbol('proto.TCProto.MoveAction', null, global);
goog.exportSymbol('proto.TCProto.MoveState', null, global);
goog.exportSymbol('proto.TCProto.MoveToAction', null, global);
goog.exportSymbol('proto.TCProto.ObserveReq', null, global);
goog.exportSymbol('proto.TCProto.PlayerState', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelChatModeReq', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelConfirmBeginReq', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelConfirmBeginRsp', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelCreationReq', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelCreationRsp', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelEndReq', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelLoadingReq', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelLoadingRsp', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelLoadingScene', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelRecallModeReq', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelScoreReq', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelScoreRsp', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelSelectTopicReq', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelSelectTopicRsp', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelShowPoemReq', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelShowPoemRsp', null, global);
goog.exportSymbol('proto.TCProto.PoetryDuelTopic', null, global);
goog.exportSymbol('proto.TCProto.RandomReachablePositionReq', null, global);
goog.exportSymbol('proto.TCProto.RandomReachablePositionRsp', null, global);
goog.exportSymbol('proto.TCProto.SetSolarTimeReq', null, global);
goog.exportSymbol('proto.TCProto.SetSolarTimeSpeedReq', null, global);
goog.exportSymbol('proto.TCProto.ShowDistanceReq', null, global);
goog.exportSymbol('proto.TCProto.TeleportAction', null, global);
goog.exportSymbol('proto.TCProto.ToGame', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.IntVector = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.IntVector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.IntVector.displayName = 'proto.TCProto.IntVector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.ToGame = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TCProto.ToGame.repeatedFields_, null);
};
goog.inherits(proto.TCProto.ToGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.ToGame.displayName = 'proto.TCProto.ToGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.SetSolarTimeReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.SetSolarTimeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.SetSolarTimeReq.displayName = 'proto.TCProto.SetSolarTimeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.SetSolarTimeSpeedReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.SetSolarTimeSpeedReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.SetSolarTimeSpeedReq.displayName = 'proto.TCProto.SetSolarTimeSpeedReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.ObserveReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TCProto.ObserveReq.repeatedFields_, null);
};
goog.inherits(proto.TCProto.ObserveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.ObserveReq.displayName = 'proto.TCProto.ObserveReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.CreatePlayerReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.CreatePlayerReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.CreatePlayerReq.displayName = 'proto.TCProto.CreatePlayerReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.IgnoreHumanInputReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.IgnoreHumanInputReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.IgnoreHumanInputReq.displayName = 'proto.TCProto.IgnoreHumanInputReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.RandomReachablePositionReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.RandomReachablePositionReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.RandomReachablePositionReq.displayName = 'proto.TCProto.RandomReachablePositionReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelConfirmBeginReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.PoetryDuelConfirmBeginReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelConfirmBeginReq.displayName = 'proto.TCProto.PoetryDuelConfirmBeginReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelSelectTopicReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.PoetryDuelSelectTopicReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelSelectTopicReq.displayName = 'proto.TCProto.PoetryDuelSelectTopicReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelLoadingReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.PoetryDuelLoadingReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelLoadingReq.displayName = 'proto.TCProto.PoetryDuelLoadingReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelShowPoemReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TCProto.PoetryDuelShowPoemReq.repeatedFields_, null);
};
goog.inherits(proto.TCProto.PoetryDuelShowPoemReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelShowPoemReq.displayName = 'proto.TCProto.PoetryDuelShowPoemReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelCreationReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TCProto.PoetryDuelCreationReq.repeatedFields_, null);
};
goog.inherits(proto.TCProto.PoetryDuelCreationReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelCreationReq.displayName = 'proto.TCProto.PoetryDuelCreationReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelScoreReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TCProto.PoetryDuelScoreReq.repeatedFields_, null);
};
goog.inherits(proto.TCProto.PoetryDuelScoreReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelScoreReq.displayName = 'proto.TCProto.PoetryDuelScoreReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelRecallModeReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.PoetryDuelRecallModeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelRecallModeReq.displayName = 'proto.TCProto.PoetryDuelRecallModeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelChatModeReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.PoetryDuelChatModeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelChatModeReq.displayName = 'proto.TCProto.PoetryDuelChatModeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelEndReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.PoetryDuelEndReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelEndReq.displayName = 'proto.TCProto.PoetryDuelEndReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.ShowDistanceReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.ShowDistanceReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.ShowDistanceReq.displayName = 'proto.TCProto.ShowDistanceReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.MoveAction = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.MoveAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.MoveAction.displayName = 'proto.TCProto.MoveAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.BubbleAction = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.BubbleAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.BubbleAction.displayName = 'proto.TCProto.BubbleAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.TeleportAction = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.TeleportAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.TeleportAction.displayName = 'proto.TCProto.TeleportAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.AnimateAction = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.AnimateAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.AnimateAction.displayName = 'proto.TCProto.AnimateAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.ChatAction = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.ChatAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.ChatAction.displayName = 'proto.TCProto.ChatAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.KeyPlotAction = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.KeyPlotAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.KeyPlotAction.displayName = 'proto.TCProto.KeyPlotAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.MoveToAction = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.MoveToAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.MoveToAction.displayName = 'proto.TCProto.MoveToAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.FromGame = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TCProto.FromGame.repeatedFields_, null);
};
goog.inherits(proto.TCProto.FromGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.FromGame.displayName = 'proto.TCProto.FromGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PlayerState = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TCProto.PlayerState.repeatedFields_, null);
};
goog.inherits(proto.TCProto.PlayerState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PlayerState.displayName = 'proto.TCProto.PlayerState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.RandomReachablePositionRsp = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.RandomReachablePositionRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.RandomReachablePositionRsp.displayName = 'proto.TCProto.RandomReachablePositionRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelConfirmBeginRsp = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.PoetryDuelConfirmBeginRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelConfirmBeginRsp.displayName = 'proto.TCProto.PoetryDuelConfirmBeginRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelSelectTopicRsp = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.PoetryDuelSelectTopicRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelSelectTopicRsp.displayName = 'proto.TCProto.PoetryDuelSelectTopicRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelLoadingRsp = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.PoetryDuelLoadingRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelLoadingRsp.displayName = 'proto.TCProto.PoetryDuelLoadingRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelShowPoemRsp = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.PoetryDuelShowPoemRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelShowPoemRsp.displayName = 'proto.TCProto.PoetryDuelShowPoemRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelCreationRsp = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.PoetryDuelCreationRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelCreationRsp.displayName = 'proto.TCProto.PoetryDuelCreationRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TCProto.PoetryDuelScoreRsp = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TCProto.PoetryDuelScoreRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TCProto.PoetryDuelScoreRsp.displayName = 'proto.TCProto.PoetryDuelScoreRsp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.IntVector.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.IntVector.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.IntVector} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.IntVector.toObject = function (includeInstance, msg) {
        var f, obj = {
            x: jspb.Message.getFieldWithDefault(msg, 1, 0),
            y: jspb.Message.getFieldWithDefault(msg, 2, 0),
            z: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.IntVector}
 */
proto.TCProto.IntVector.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.IntVector;
    return proto.TCProto.IntVector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.IntVector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.IntVector}
 */
proto.TCProto.IntVector.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setX(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setY(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setZ(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.IntVector.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.IntVector.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.IntVector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.IntVector.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getX();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getY();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
    f = message.getZ();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.TCProto.IntVector.prototype.getX = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.IntVector} returns this
 */
proto.TCProto.IntVector.prototype.setX = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.TCProto.IntVector.prototype.getY = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.IntVector} returns this
 */
proto.TCProto.IntVector.prototype.setY = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 z = 3;
 * @return {number}
 */
proto.TCProto.IntVector.prototype.getZ = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.IntVector} returns this
 */
proto.TCProto.IntVector.prototype.setZ = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TCProto.ToGame.repeatedFields_ = [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 30, 31, 32, 33, 34, 35, 36, 37, 38];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.ToGame.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.ToGame.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.ToGame} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.ToGame.toObject = function (includeInstance, msg) {
        var f, obj = {
            observeReq: (f = msg.getObserveReq()) && proto.TCProto.ObserveReq.toObject(includeInstance, f),
            setSolarTimeReqsList: jspb.Message.toObjectList(msg.getSetSolarTimeReqsList(),
                proto.TCProto.SetSolarTimeReq.toObject, includeInstance),
            setSolarTimeSpeedReqsList: jspb.Message.toObjectList(msg.getSetSolarTimeSpeedReqsList(),
                proto.TCProto.SetSolarTimeSpeedReq.toObject, includeInstance),
            createPlayerReqsList: jspb.Message.toObjectList(msg.getCreatePlayerReqsList(),
                proto.TCProto.CreatePlayerReq.toObject, includeInstance),
            ignoreHumanInputReqsList: jspb.Message.toObjectList(msg.getIgnoreHumanInputReqsList(),
                proto.TCProto.IgnoreHumanInputReq.toObject, includeInstance),
            randomReachablePositionReqsList: jspb.Message.toObjectList(msg.getRandomReachablePositionReqsList(),
                proto.TCProto.RandomReachablePositionReq.toObject, includeInstance),
            showDistanceReqsList: jspb.Message.toObjectList(msg.getShowDistanceReqsList(),
                proto.TCProto.ShowDistanceReq.toObject, includeInstance),
            moveActionsList: jspb.Message.toObjectList(msg.getMoveActionsList(),
                proto.TCProto.MoveAction.toObject, includeInstance),
            bubbleActionsList: jspb.Message.toObjectList(msg.getBubbleActionsList(),
                proto.TCProto.BubbleAction.toObject, includeInstance),
            teleportActionsList: jspb.Message.toObjectList(msg.getTeleportActionsList(),
                proto.TCProto.TeleportAction.toObject, includeInstance),
            animateActionsList: jspb.Message.toObjectList(msg.getAnimateActionsList(),
                proto.TCProto.AnimateAction.toObject, includeInstance),
            chatActionsList: jspb.Message.toObjectList(msg.getChatActionsList(),
                proto.TCProto.ChatAction.toObject, includeInstance),
            keyPlotActionsList: jspb.Message.toObjectList(msg.getKeyPlotActionsList(),
                proto.TCProto.KeyPlotAction.toObject, includeInstance),
            moveToActionsList: jspb.Message.toObjectList(msg.getMoveToActionsList(),
                proto.TCProto.MoveToAction.toObject, includeInstance),
            poetryDuelConfirmBeginReqsList: jspb.Message.toObjectList(msg.getPoetryDuelConfirmBeginReqsList(),
                proto.TCProto.PoetryDuelConfirmBeginReq.toObject, includeInstance),
            poetryDuelSelectTopicReqsList: jspb.Message.toObjectList(msg.getPoetryDuelSelectTopicReqsList(),
                proto.TCProto.PoetryDuelSelectTopicReq.toObject, includeInstance),
            poetryDuelLoadingReqsList: jspb.Message.toObjectList(msg.getPoetryDuelLoadingReqsList(),
                proto.TCProto.PoetryDuelLoadingReq.toObject, includeInstance),
            poetryDuelShowPoemReqsList: jspb.Message.toObjectList(msg.getPoetryDuelShowPoemReqsList(),
                proto.TCProto.PoetryDuelShowPoemReq.toObject, includeInstance),
            poetryDuelCreationReqsList: jspb.Message.toObjectList(msg.getPoetryDuelCreationReqsList(),
                proto.TCProto.PoetryDuelCreationReq.toObject, includeInstance),
            poetryDuelScoreReqsList: jspb.Message.toObjectList(msg.getPoetryDuelScoreReqsList(),
                proto.TCProto.PoetryDuelScoreReq.toObject, includeInstance),
            poetryDuelRecallModeReqsList: jspb.Message.toObjectList(msg.getPoetryDuelRecallModeReqsList(),
                proto.TCProto.PoetryDuelRecallModeReq.toObject, includeInstance),
            poetryDuelChatModeReqsList: jspb.Message.toObjectList(msg.getPoetryDuelChatModeReqsList(),
                proto.TCProto.PoetryDuelChatModeReq.toObject, includeInstance),
            poetryDuelEndReqsList: jspb.Message.toObjectList(msg.getPoetryDuelEndReqsList(),
                proto.TCProto.PoetryDuelEndReq.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.ToGame}
 */
proto.TCProto.ToGame.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.ToGame;
    return proto.TCProto.ToGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.ToGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.ToGame}
 */
proto.TCProto.ToGame.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.TCProto.ObserveReq;
                reader.readMessage(value, proto.TCProto.ObserveReq.deserializeBinaryFromReader);
                msg.setObserveReq(value);
                break;
            case 2:
                var value = new proto.TCProto.SetSolarTimeReq;
                reader.readMessage(value, proto.TCProto.SetSolarTimeReq.deserializeBinaryFromReader);
                msg.addSetSolarTimeReqs(value);
                break;
            case 3:
                var value = new proto.TCProto.SetSolarTimeSpeedReq;
                reader.readMessage(value, proto.TCProto.SetSolarTimeSpeedReq.deserializeBinaryFromReader);
                msg.addSetSolarTimeSpeedReqs(value);
                break;
            case 4:
                var value = new proto.TCProto.CreatePlayerReq;
                reader.readMessage(value, proto.TCProto.CreatePlayerReq.deserializeBinaryFromReader);
                msg.addCreatePlayerReqs(value);
                break;
            case 5:
                var value = new proto.TCProto.IgnoreHumanInputReq;
                reader.readMessage(value, proto.TCProto.IgnoreHumanInputReq.deserializeBinaryFromReader);
                msg.addIgnoreHumanInputReqs(value);
                break;
            case 6:
                var value = new proto.TCProto.RandomReachablePositionReq;
                reader.readMessage(value, proto.TCProto.RandomReachablePositionReq.deserializeBinaryFromReader);
                msg.addRandomReachablePositionReqs(value);
                break;
            case 7:
                var value = new proto.TCProto.ShowDistanceReq;
                reader.readMessage(value, proto.TCProto.ShowDistanceReq.deserializeBinaryFromReader);
                msg.addShowDistanceReqs(value);
                break;
            case 10:
                var value = new proto.TCProto.MoveAction;
                reader.readMessage(value, proto.TCProto.MoveAction.deserializeBinaryFromReader);
                msg.addMoveActions(value);
                break;
            case 11:
                var value = new proto.TCProto.BubbleAction;
                reader.readMessage(value, proto.TCProto.BubbleAction.deserializeBinaryFromReader);
                msg.addBubbleActions(value);
                break;
            case 12:
                var value = new proto.TCProto.TeleportAction;
                reader.readMessage(value, proto.TCProto.TeleportAction.deserializeBinaryFromReader);
                msg.addTeleportActions(value);
                break;
            case 13:
                var value = new proto.TCProto.AnimateAction;
                reader.readMessage(value, proto.TCProto.AnimateAction.deserializeBinaryFromReader);
                msg.addAnimateActions(value);
                break;
            case 14:
                var value = new proto.TCProto.ChatAction;
                reader.readMessage(value, proto.TCProto.ChatAction.deserializeBinaryFromReader);
                msg.addChatActions(value);
                break;
            case 15:
                var value = new proto.TCProto.KeyPlotAction;
                reader.readMessage(value, proto.TCProto.KeyPlotAction.deserializeBinaryFromReader);
                msg.addKeyPlotActions(value);
                break;
            case 16:
                var value = new proto.TCProto.MoveToAction;
                reader.readMessage(value, proto.TCProto.MoveToAction.deserializeBinaryFromReader);
                msg.addMoveToActions(value);
                break;
            case 30:
                var value = new proto.TCProto.PoetryDuelConfirmBeginReq;
                reader.readMessage(value, proto.TCProto.PoetryDuelConfirmBeginReq.deserializeBinaryFromReader);
                msg.addPoetryDuelConfirmBeginReqs(value);
                break;
            case 31:
                var value = new proto.TCProto.PoetryDuelSelectTopicReq;
                reader.readMessage(value, proto.TCProto.PoetryDuelSelectTopicReq.deserializeBinaryFromReader);
                msg.addPoetryDuelSelectTopicReqs(value);
                break;
            case 32:
                var value = new proto.TCProto.PoetryDuelLoadingReq;
                reader.readMessage(value, proto.TCProto.PoetryDuelLoadingReq.deserializeBinaryFromReader);
                msg.addPoetryDuelLoadingReqs(value);
                break;
            case 33:
                var value = new proto.TCProto.PoetryDuelShowPoemReq;
                reader.readMessage(value, proto.TCProto.PoetryDuelShowPoemReq.deserializeBinaryFromReader);
                msg.addPoetryDuelShowPoemReqs(value);
                break;
            case 34:
                var value = new proto.TCProto.PoetryDuelCreationReq;
                reader.readMessage(value, proto.TCProto.PoetryDuelCreationReq.deserializeBinaryFromReader);
                msg.addPoetryDuelCreationReqs(value);
                break;
            case 35:
                var value = new proto.TCProto.PoetryDuelScoreReq;
                reader.readMessage(value, proto.TCProto.PoetryDuelScoreReq.deserializeBinaryFromReader);
                msg.addPoetryDuelScoreReqs(value);
                break;
            case 36:
                var value = new proto.TCProto.PoetryDuelRecallModeReq;
                reader.readMessage(value, proto.TCProto.PoetryDuelRecallModeReq.deserializeBinaryFromReader);
                msg.addPoetryDuelRecallModeReqs(value);
                break;
            case 37:
                var value = new proto.TCProto.PoetryDuelChatModeReq;
                reader.readMessage(value, proto.TCProto.PoetryDuelChatModeReq.deserializeBinaryFromReader);
                msg.addPoetryDuelChatModeReqs(value);
                break;
            case 38:
                var value = new proto.TCProto.PoetryDuelEndReq;
                reader.readMessage(value, proto.TCProto.PoetryDuelEndReq.deserializeBinaryFromReader);
                msg.addPoetryDuelEndReqs(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.ToGame.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.ToGame.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.ToGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.ToGame.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getObserveReq();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.TCProto.ObserveReq.serializeBinaryToWriter
        );
    }
    f = message.getSetSolarTimeReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            2,
            f,
            proto.TCProto.SetSolarTimeReq.serializeBinaryToWriter
        );
    }
    f = message.getSetSolarTimeSpeedReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            3,
            f,
            proto.TCProto.SetSolarTimeSpeedReq.serializeBinaryToWriter
        );
    }
    f = message.getCreatePlayerReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            4,
            f,
            proto.TCProto.CreatePlayerReq.serializeBinaryToWriter
        );
    }
    f = message.getIgnoreHumanInputReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            5,
            f,
            proto.TCProto.IgnoreHumanInputReq.serializeBinaryToWriter
        );
    }
    f = message.getRandomReachablePositionReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            6,
            f,
            proto.TCProto.RandomReachablePositionReq.serializeBinaryToWriter
        );
    }
    f = message.getShowDistanceReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            7,
            f,
            proto.TCProto.ShowDistanceReq.serializeBinaryToWriter
        );
    }
    f = message.getMoveActionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            10,
            f,
            proto.TCProto.MoveAction.serializeBinaryToWriter
        );
    }
    f = message.getBubbleActionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            11,
            f,
            proto.TCProto.BubbleAction.serializeBinaryToWriter
        );
    }
    f = message.getTeleportActionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            12,
            f,
            proto.TCProto.TeleportAction.serializeBinaryToWriter
        );
    }
    f = message.getAnimateActionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            13,
            f,
            proto.TCProto.AnimateAction.serializeBinaryToWriter
        );
    }
    f = message.getChatActionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            14,
            f,
            proto.TCProto.ChatAction.serializeBinaryToWriter
        );
    }
    f = message.getKeyPlotActionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            15,
            f,
            proto.TCProto.KeyPlotAction.serializeBinaryToWriter
        );
    }
    f = message.getMoveToActionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            16,
            f,
            proto.TCProto.MoveToAction.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelConfirmBeginReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            30,
            f,
            proto.TCProto.PoetryDuelConfirmBeginReq.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelSelectTopicReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            31,
            f,
            proto.TCProto.PoetryDuelSelectTopicReq.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelLoadingReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            32,
            f,
            proto.TCProto.PoetryDuelLoadingReq.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelShowPoemReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            33,
            f,
            proto.TCProto.PoetryDuelShowPoemReq.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelCreationReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            34,
            f,
            proto.TCProto.PoetryDuelCreationReq.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelScoreReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            35,
            f,
            proto.TCProto.PoetryDuelScoreReq.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelRecallModeReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            36,
            f,
            proto.TCProto.PoetryDuelRecallModeReq.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelChatModeReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            37,
            f,
            proto.TCProto.PoetryDuelChatModeReq.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelEndReqsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            38,
            f,
            proto.TCProto.PoetryDuelEndReq.serializeBinaryToWriter
        );
    }
};


/**
 * optional ObserveReq observe_req = 1;
 * @return {?proto.TCProto.ObserveReq}
 */
proto.TCProto.ToGame.prototype.getObserveReq = function () {
    return /** @type{?proto.TCProto.ObserveReq} */ (
        jspb.Message.getWrapperField(this, proto.TCProto.ObserveReq, 1));
};


/**
 * @param {?proto.TCProto.ObserveReq|undefined} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setObserveReq = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearObserveReq = function () {
    return this.setObserveReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TCProto.ToGame.prototype.hasObserveReq = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SetSolarTimeReq set_solar_time_reqs = 2;
 * @return {!Array<!proto.TCProto.SetSolarTimeReq>}
 */
proto.TCProto.ToGame.prototype.getSetSolarTimeReqsList = function () {
    return /** @type{!Array<!proto.TCProto.SetSolarTimeReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.SetSolarTimeReq, 2));
};


/**
 * @param {!Array<!proto.TCProto.SetSolarTimeReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setSetSolarTimeReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TCProto.SetSolarTimeReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.SetSolarTimeReq}
 */
proto.TCProto.ToGame.prototype.addSetSolarTimeReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TCProto.SetSolarTimeReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearSetSolarTimeReqsList = function () {
    return this.setSetSolarTimeReqsList([]);
};


/**
 * repeated SetSolarTimeSpeedReq set_solar_time_speed_reqs = 3;
 * @return {!Array<!proto.TCProto.SetSolarTimeSpeedReq>}
 */
proto.TCProto.ToGame.prototype.getSetSolarTimeSpeedReqsList = function () {
    return /** @type{!Array<!proto.TCProto.SetSolarTimeSpeedReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.SetSolarTimeSpeedReq, 3));
};


/**
 * @param {!Array<!proto.TCProto.SetSolarTimeSpeedReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setSetSolarTimeSpeedReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.TCProto.SetSolarTimeSpeedReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.SetSolarTimeSpeedReq}
 */
proto.TCProto.ToGame.prototype.addSetSolarTimeSpeedReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.TCProto.SetSolarTimeSpeedReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearSetSolarTimeSpeedReqsList = function () {
    return this.setSetSolarTimeSpeedReqsList([]);
};


/**
 * repeated CreatePlayerReq create_player_reqs = 4;
 * @return {!Array<!proto.TCProto.CreatePlayerReq>}
 */
proto.TCProto.ToGame.prototype.getCreatePlayerReqsList = function () {
    return /** @type{!Array<!proto.TCProto.CreatePlayerReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.CreatePlayerReq, 4));
};


/**
 * @param {!Array<!proto.TCProto.CreatePlayerReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setCreatePlayerReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.TCProto.CreatePlayerReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.CreatePlayerReq}
 */
proto.TCProto.ToGame.prototype.addCreatePlayerReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.TCProto.CreatePlayerReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearCreatePlayerReqsList = function () {
    return this.setCreatePlayerReqsList([]);
};


/**
 * repeated IgnoreHumanInputReq ignore_human_input_reqs = 5;
 * @return {!Array<!proto.TCProto.IgnoreHumanInputReq>}
 */
proto.TCProto.ToGame.prototype.getIgnoreHumanInputReqsList = function () {
    return /** @type{!Array<!proto.TCProto.IgnoreHumanInputReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.IgnoreHumanInputReq, 5));
};


/**
 * @param {!Array<!proto.TCProto.IgnoreHumanInputReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setIgnoreHumanInputReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.TCProto.IgnoreHumanInputReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.IgnoreHumanInputReq}
 */
proto.TCProto.ToGame.prototype.addIgnoreHumanInputReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.TCProto.IgnoreHumanInputReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearIgnoreHumanInputReqsList = function () {
    return this.setIgnoreHumanInputReqsList([]);
};


/**
 * repeated RandomReachablePositionReq random_reachable_position_reqs = 6;
 * @return {!Array<!proto.TCProto.RandomReachablePositionReq>}
 */
proto.TCProto.ToGame.prototype.getRandomReachablePositionReqsList = function () {
    return /** @type{!Array<!proto.TCProto.RandomReachablePositionReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.RandomReachablePositionReq, 6));
};


/**
 * @param {!Array<!proto.TCProto.RandomReachablePositionReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setRandomReachablePositionReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.TCProto.RandomReachablePositionReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.RandomReachablePositionReq}
 */
proto.TCProto.ToGame.prototype.addRandomReachablePositionReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.TCProto.RandomReachablePositionReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearRandomReachablePositionReqsList = function () {
    return this.setRandomReachablePositionReqsList([]);
};


/**
 * repeated ShowDistanceReq show_distance_reqs = 7;
 * @return {!Array<!proto.TCProto.ShowDistanceReq>}
 */
proto.TCProto.ToGame.prototype.getShowDistanceReqsList = function () {
    return /** @type{!Array<!proto.TCProto.ShowDistanceReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.ShowDistanceReq, 7));
};


/**
 * @param {!Array<!proto.TCProto.ShowDistanceReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setShowDistanceReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.TCProto.ShowDistanceReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.ShowDistanceReq}
 */
proto.TCProto.ToGame.prototype.addShowDistanceReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.TCProto.ShowDistanceReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearShowDistanceReqsList = function () {
    return this.setShowDistanceReqsList([]);
};


/**
 * repeated MoveAction move_actions = 10;
 * @return {!Array<!proto.TCProto.MoveAction>}
 */
proto.TCProto.ToGame.prototype.getMoveActionsList = function () {
    return /** @type{!Array<!proto.TCProto.MoveAction>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.MoveAction, 10));
};


/**
 * @param {!Array<!proto.TCProto.MoveAction>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setMoveActionsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.TCProto.MoveAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.MoveAction}
 */
proto.TCProto.ToGame.prototype.addMoveActions = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.TCProto.MoveAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearMoveActionsList = function () {
    return this.setMoveActionsList([]);
};


/**
 * repeated BubbleAction bubble_actions = 11;
 * @return {!Array<!proto.TCProto.BubbleAction>}
 */
proto.TCProto.ToGame.prototype.getBubbleActionsList = function () {
    return /** @type{!Array<!proto.TCProto.BubbleAction>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.BubbleAction, 11));
};


/**
 * @param {!Array<!proto.TCProto.BubbleAction>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setBubbleActionsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.TCProto.BubbleAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.BubbleAction}
 */
proto.TCProto.ToGame.prototype.addBubbleActions = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.TCProto.BubbleAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearBubbleActionsList = function () {
    return this.setBubbleActionsList([]);
};


/**
 * repeated TeleportAction teleport_actions = 12;
 * @return {!Array<!proto.TCProto.TeleportAction>}
 */
proto.TCProto.ToGame.prototype.getTeleportActionsList = function () {
    return /** @type{!Array<!proto.TCProto.TeleportAction>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.TeleportAction, 12));
};


/**
 * @param {!Array<!proto.TCProto.TeleportAction>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setTeleportActionsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.TCProto.TeleportAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.TeleportAction}
 */
proto.TCProto.ToGame.prototype.addTeleportActions = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.TCProto.TeleportAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearTeleportActionsList = function () {
    return this.setTeleportActionsList([]);
};


/**
 * repeated AnimateAction animate_actions = 13;
 * @return {!Array<!proto.TCProto.AnimateAction>}
 */
proto.TCProto.ToGame.prototype.getAnimateActionsList = function () {
    return /** @type{!Array<!proto.TCProto.AnimateAction>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.AnimateAction, 13));
};


/**
 * @param {!Array<!proto.TCProto.AnimateAction>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setAnimateActionsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.TCProto.AnimateAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.AnimateAction}
 */
proto.TCProto.ToGame.prototype.addAnimateActions = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.TCProto.AnimateAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearAnimateActionsList = function () {
    return this.setAnimateActionsList([]);
};


/**
 * repeated ChatAction chat_actions = 14;
 * @return {!Array<!proto.TCProto.ChatAction>}
 */
proto.TCProto.ToGame.prototype.getChatActionsList = function () {
    return /** @type{!Array<!proto.TCProto.ChatAction>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.ChatAction, 14));
};


/**
 * @param {!Array<!proto.TCProto.ChatAction>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setChatActionsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.TCProto.ChatAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.ChatAction}
 */
proto.TCProto.ToGame.prototype.addChatActions = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.TCProto.ChatAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearChatActionsList = function () {
    return this.setChatActionsList([]);
};


/**
 * repeated KeyPlotAction key_plot_actions = 15;
 * @return {!Array<!proto.TCProto.KeyPlotAction>}
 */
proto.TCProto.ToGame.prototype.getKeyPlotActionsList = function () {
    return /** @type{!Array<!proto.TCProto.KeyPlotAction>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.KeyPlotAction, 15));
};


/**
 * @param {!Array<!proto.TCProto.KeyPlotAction>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setKeyPlotActionsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.TCProto.KeyPlotAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.KeyPlotAction}
 */
proto.TCProto.ToGame.prototype.addKeyPlotActions = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.TCProto.KeyPlotAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearKeyPlotActionsList = function () {
    return this.setKeyPlotActionsList([]);
};


/**
 * repeated MoveToAction move_to_actions = 16;
 * @return {!Array<!proto.TCProto.MoveToAction>}
 */
proto.TCProto.ToGame.prototype.getMoveToActionsList = function () {
    return /** @type{!Array<!proto.TCProto.MoveToAction>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.MoveToAction, 16));
};


/**
 * @param {!Array<!proto.TCProto.MoveToAction>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setMoveToActionsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.TCProto.MoveToAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.MoveToAction}
 */
proto.TCProto.ToGame.prototype.addMoveToActions = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.TCProto.MoveToAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearMoveToActionsList = function () {
    return this.setMoveToActionsList([]);
};


/**
 * repeated PoetryDuelConfirmBeginReq poetry_duel_confirm_begin_reqs = 30;
 * @return {!Array<!proto.TCProto.PoetryDuelConfirmBeginReq>}
 */
proto.TCProto.ToGame.prototype.getPoetryDuelConfirmBeginReqsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelConfirmBeginReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelConfirmBeginReq, 30));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelConfirmBeginReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setPoetryDuelConfirmBeginReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 30, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelConfirmBeginReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelConfirmBeginReq}
 */
proto.TCProto.ToGame.prototype.addPoetryDuelConfirmBeginReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 30, opt_value, proto.TCProto.PoetryDuelConfirmBeginReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearPoetryDuelConfirmBeginReqsList = function () {
    return this.setPoetryDuelConfirmBeginReqsList([]);
};


/**
 * repeated PoetryDuelSelectTopicReq poetry_duel_select_topic_reqs = 31;
 * @return {!Array<!proto.TCProto.PoetryDuelSelectTopicReq>}
 */
proto.TCProto.ToGame.prototype.getPoetryDuelSelectTopicReqsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelSelectTopicReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelSelectTopicReq, 31));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelSelectTopicReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setPoetryDuelSelectTopicReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 31, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelSelectTopicReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelSelectTopicReq}
 */
proto.TCProto.ToGame.prototype.addPoetryDuelSelectTopicReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 31, opt_value, proto.TCProto.PoetryDuelSelectTopicReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearPoetryDuelSelectTopicReqsList = function () {
    return this.setPoetryDuelSelectTopicReqsList([]);
};


/**
 * repeated PoetryDuelLoadingReq poetry_duel_loading_reqs = 32;
 * @return {!Array<!proto.TCProto.PoetryDuelLoadingReq>}
 */
proto.TCProto.ToGame.prototype.getPoetryDuelLoadingReqsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelLoadingReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelLoadingReq, 32));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelLoadingReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setPoetryDuelLoadingReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 32, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelLoadingReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelLoadingReq}
 */
proto.TCProto.ToGame.prototype.addPoetryDuelLoadingReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 32, opt_value, proto.TCProto.PoetryDuelLoadingReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearPoetryDuelLoadingReqsList = function () {
    return this.setPoetryDuelLoadingReqsList([]);
};


/**
 * repeated PoetryDuelShowPoemReq poetry_duel_show_poem_reqs = 33;
 * @return {!Array<!proto.TCProto.PoetryDuelShowPoemReq>}
 */
proto.TCProto.ToGame.prototype.getPoetryDuelShowPoemReqsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelShowPoemReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelShowPoemReq, 33));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelShowPoemReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setPoetryDuelShowPoemReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 33, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelShowPoemReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelShowPoemReq}
 */
proto.TCProto.ToGame.prototype.addPoetryDuelShowPoemReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 33, opt_value, proto.TCProto.PoetryDuelShowPoemReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearPoetryDuelShowPoemReqsList = function () {
    return this.setPoetryDuelShowPoemReqsList([]);
};


/**
 * repeated PoetryDuelCreationReq poetry_duel_creation_reqs = 34;
 * @return {!Array<!proto.TCProto.PoetryDuelCreationReq>}
 */
proto.TCProto.ToGame.prototype.getPoetryDuelCreationReqsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelCreationReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelCreationReq, 34));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelCreationReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setPoetryDuelCreationReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 34, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelCreationReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelCreationReq}
 */
proto.TCProto.ToGame.prototype.addPoetryDuelCreationReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 34, opt_value, proto.TCProto.PoetryDuelCreationReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearPoetryDuelCreationReqsList = function () {
    return this.setPoetryDuelCreationReqsList([]);
};


/**
 * repeated PoetryDuelScoreReq poetry_duel_score_reqs = 35;
 * @return {!Array<!proto.TCProto.PoetryDuelScoreReq>}
 */
proto.TCProto.ToGame.prototype.getPoetryDuelScoreReqsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelScoreReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelScoreReq, 35));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelScoreReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setPoetryDuelScoreReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 35, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelScoreReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelScoreReq}
 */
proto.TCProto.ToGame.prototype.addPoetryDuelScoreReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 35, opt_value, proto.TCProto.PoetryDuelScoreReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearPoetryDuelScoreReqsList = function () {
    return this.setPoetryDuelScoreReqsList([]);
};


/**
 * repeated PoetryDuelRecallModeReq poetry_duel_recall_mode_reqs = 36;
 * @return {!Array<!proto.TCProto.PoetryDuelRecallModeReq>}
 */
proto.TCProto.ToGame.prototype.getPoetryDuelRecallModeReqsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelRecallModeReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelRecallModeReq, 36));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelRecallModeReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setPoetryDuelRecallModeReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 36, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelRecallModeReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelRecallModeReq}
 */
proto.TCProto.ToGame.prototype.addPoetryDuelRecallModeReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 36, opt_value, proto.TCProto.PoetryDuelRecallModeReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearPoetryDuelRecallModeReqsList = function () {
    return this.setPoetryDuelRecallModeReqsList([]);
};


/**
 * repeated PoetryDuelChatModeReq poetry_duel_chat_mode_reqs = 37;
 * @return {!Array<!proto.TCProto.PoetryDuelChatModeReq>}
 */
proto.TCProto.ToGame.prototype.getPoetryDuelChatModeReqsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelChatModeReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelChatModeReq, 37));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelChatModeReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setPoetryDuelChatModeReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 37, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelChatModeReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelChatModeReq}
 */
proto.TCProto.ToGame.prototype.addPoetryDuelChatModeReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 37, opt_value, proto.TCProto.PoetryDuelChatModeReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearPoetryDuelChatModeReqsList = function () {
    return this.setPoetryDuelChatModeReqsList([]);
};


/**
 * repeated PoetryDuelEndReq poetry_duel_end_reqs = 38;
 * @return {!Array<!proto.TCProto.PoetryDuelEndReq>}
 */
proto.TCProto.ToGame.prototype.getPoetryDuelEndReqsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelEndReq>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelEndReq, 38));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelEndReq>} value
 * @return {!proto.TCProto.ToGame} returns this
*/
proto.TCProto.ToGame.prototype.setPoetryDuelEndReqsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 38, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelEndReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelEndReq}
 */
proto.TCProto.ToGame.prototype.addPoetryDuelEndReqs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 38, opt_value, proto.TCProto.PoetryDuelEndReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ToGame} returns this
 */
proto.TCProto.ToGame.prototype.clearPoetryDuelEndReqsList = function () {
    return this.setPoetryDuelEndReqsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.SetSolarTimeReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.SetSolarTimeReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.SetSolarTimeReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.SetSolarTimeReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            time: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.SetSolarTimeReq}
 */
proto.TCProto.SetSolarTimeReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.SetSolarTimeReq;
    return proto.TCProto.SetSolarTimeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.SetSolarTimeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.SetSolarTimeReq}
 */
proto.TCProto.SetSolarTimeReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readFloat());
                msg.setTime(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.SetSolarTimeReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.SetSolarTimeReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.SetSolarTimeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.SetSolarTimeReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTime();
    if (f !== 0.0) {
        writer.writeFloat(
            1,
            f
        );
    }
};


/**
 * optional float time = 1;
 * @return {number}
 */
proto.TCProto.SetSolarTimeReq.prototype.getTime = function () {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.SetSolarTimeReq} returns this
 */
proto.TCProto.SetSolarTimeReq.prototype.setTime = function (value) {
    return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.SetSolarTimeSpeedReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.SetSolarTimeSpeedReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.SetSolarTimeSpeedReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.SetSolarTimeSpeedReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.SetSolarTimeSpeedReq}
 */
proto.TCProto.SetSolarTimeSpeedReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.SetSolarTimeSpeedReq;
    return proto.TCProto.SetSolarTimeSpeedReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.SetSolarTimeSpeedReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.SetSolarTimeSpeedReq}
 */
proto.TCProto.SetSolarTimeSpeedReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readFloat());
                msg.setSpeed(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.SetSolarTimeSpeedReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.SetSolarTimeSpeedReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.SetSolarTimeSpeedReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.SetSolarTimeSpeedReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSpeed();
    if (f !== 0.0) {
        writer.writeFloat(
            1,
            f
        );
    }
};


/**
 * optional float speed = 1;
 * @return {number}
 */
proto.TCProto.SetSolarTimeSpeedReq.prototype.getSpeed = function () {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.SetSolarTimeSpeedReq} returns this
 */
proto.TCProto.SetSolarTimeSpeedReq.prototype.setSpeed = function (value) {
    return jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TCProto.ObserveReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.ObserveReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.ObserveReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.ObserveReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.ObserveReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            valid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
            playerIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
            observeAllPlayers: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.ObserveReq}
 */
proto.TCProto.ObserveReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.ObserveReq;
    return proto.TCProto.ObserveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.ObserveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.ObserveReq}
 */
proto.TCProto.ObserveReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setValid(value);
                break;
            case 2:
                var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
                for (var i = 0; i < values.length; i++) {
                    msg.addPlayerIds(values[i]);
                }
                break;
            case 3:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setObserveAllPlayers(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.ObserveReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.ObserveReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.ObserveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.ObserveReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValid();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
    f = message.getPlayerIdsList();
    if (f.length > 0) {
        writer.writePackedInt32(
            2,
            f
        );
    }
    f = message.getObserveAllPlayers();
    if (f) {
        writer.writeBool(
            3,
            f
        );
    }
};


/**
 * optional bool valid = 1;
 * @return {boolean}
 */
proto.TCProto.ObserveReq.prototype.getValid = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TCProto.ObserveReq} returns this
 */
proto.TCProto.ObserveReq.prototype.setValid = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated int32 player_ids = 2;
 * @return {!Array<number>}
 */
proto.TCProto.ObserveReq.prototype.getPlayerIdsList = function () {
    return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.TCProto.ObserveReq} returns this
 */
proto.TCProto.ObserveReq.prototype.setPlayerIdsList = function (value) {
    return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.TCProto.ObserveReq} returns this
 */
proto.TCProto.ObserveReq.prototype.addPlayerIds = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.ObserveReq} returns this
 */
proto.TCProto.ObserveReq.prototype.clearPlayerIdsList = function () {
    return this.setPlayerIdsList([]);
};


/**
 * optional bool observe_all_players = 3;
 * @return {boolean}
 */
proto.TCProto.ObserveReq.prototype.getObserveAllPlayers = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TCProto.ObserveReq} returns this
 */
proto.TCProto.ObserveReq.prototype.setObserveAllPlayers = function (value) {
    return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.CreatePlayerReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.CreatePlayerReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.CreatePlayerReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.CreatePlayerReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            position: (f = msg.getPosition()) && proto.TCProto.IntVector.toObject(includeInstance, f),
            yaw: jspb.Message.getFieldWithDefault(msg, 3, 0),
            modelId: jspb.Message.getFieldWithDefault(msg, 4, 0),
            name: jspb.Message.getFieldWithDefault(msg, 5, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.CreatePlayerReq}
 */
proto.TCProto.CreatePlayerReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.CreatePlayerReq;
    return proto.TCProto.CreatePlayerReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.CreatePlayerReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.CreatePlayerReq}
 */
proto.TCProto.CreatePlayerReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPlayerId(value);
                break;
            case 2:
                var value = new proto.TCProto.IntVector;
                reader.readMessage(value, proto.TCProto.IntVector.deserializeBinaryFromReader);
                msg.setPosition(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setYaw(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setModelId(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.CreatePlayerReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.CreatePlayerReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.CreatePlayerReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.CreatePlayerReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getPosition();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            proto.TCProto.IntVector.serializeBinaryToWriter
        );
    }
    f = message.getYaw();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
    f = message.getModelId();
    if (f !== 0) {
        writer.writeInt32(
            4,
            f
        );
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(
            5,
            f
        );
    }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.TCProto.CreatePlayerReq.prototype.getPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.CreatePlayerReq} returns this
 */
proto.TCProto.CreatePlayerReq.prototype.setPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IntVector position = 2;
 * @return {?proto.TCProto.IntVector}
 */
proto.TCProto.CreatePlayerReq.prototype.getPosition = function () {
    return /** @type{?proto.TCProto.IntVector} */ (
        jspb.Message.getWrapperField(this, proto.TCProto.IntVector, 2));
};


/**
 * @param {?proto.TCProto.IntVector|undefined} value
 * @return {!proto.TCProto.CreatePlayerReq} returns this
*/
proto.TCProto.CreatePlayerReq.prototype.setPosition = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TCProto.CreatePlayerReq} returns this
 */
proto.TCProto.CreatePlayerReq.prototype.clearPosition = function () {
    return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TCProto.CreatePlayerReq.prototype.hasPosition = function () {
    return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 yaw = 3;
 * @return {number}
 */
proto.TCProto.CreatePlayerReq.prototype.getYaw = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.CreatePlayerReq} returns this
 */
proto.TCProto.CreatePlayerReq.prototype.setYaw = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 model_id = 4;
 * @return {number}
 */
proto.TCProto.CreatePlayerReq.prototype.getModelId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.CreatePlayerReq} returns this
 */
proto.TCProto.CreatePlayerReq.prototype.setModelId = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.TCProto.CreatePlayerReq.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.TCProto.CreatePlayerReq} returns this
 */
proto.TCProto.CreatePlayerReq.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.IgnoreHumanInputReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.IgnoreHumanInputReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.IgnoreHumanInputReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.IgnoreHumanInputReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            isIgnore: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.IgnoreHumanInputReq}
 */
proto.TCProto.IgnoreHumanInputReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.IgnoreHumanInputReq;
    return proto.TCProto.IgnoreHumanInputReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.IgnoreHumanInputReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.IgnoreHumanInputReq}
 */
proto.TCProto.IgnoreHumanInputReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPlayerId(value);
                break;
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setIsIgnore(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.IgnoreHumanInputReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.IgnoreHumanInputReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.IgnoreHumanInputReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.IgnoreHumanInputReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getIsIgnore();
    if (f) {
        writer.writeBool(
            2,
            f
        );
    }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.TCProto.IgnoreHumanInputReq.prototype.getPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.IgnoreHumanInputReq} returns this
 */
proto.TCProto.IgnoreHumanInputReq.prototype.setPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool is_ignore = 2;
 * @return {boolean}
 */
proto.TCProto.IgnoreHumanInputReq.prototype.getIsIgnore = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TCProto.IgnoreHumanInputReq} returns this
 */
proto.TCProto.IgnoreHumanInputReq.prototype.setIsIgnore = function (value) {
    return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.RandomReachablePositionReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.RandomReachablePositionReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.RandomReachablePositionReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.RandomReachablePositionReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            position: (f = msg.getPosition()) && proto.TCProto.IntVector.toObject(includeInstance, f),
            radius: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.RandomReachablePositionReq}
 */
proto.TCProto.RandomReachablePositionReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.RandomReachablePositionReq;
    return proto.TCProto.RandomReachablePositionReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.RandomReachablePositionReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.RandomReachablePositionReq}
 */
proto.TCProto.RandomReachablePositionReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.TCProto.IntVector;
                reader.readMessage(value, proto.TCProto.IntVector.deserializeBinaryFromReader);
                msg.setPosition(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setRadius(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.RandomReachablePositionReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.RandomReachablePositionReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.RandomReachablePositionReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.RandomReachablePositionReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPosition();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.TCProto.IntVector.serializeBinaryToWriter
        );
    }
    f = message.getRadius();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
};


/**
 * optional IntVector position = 1;
 * @return {?proto.TCProto.IntVector}
 */
proto.TCProto.RandomReachablePositionReq.prototype.getPosition = function () {
    return /** @type{?proto.TCProto.IntVector} */ (
        jspb.Message.getWrapperField(this, proto.TCProto.IntVector, 1));
};


/**
 * @param {?proto.TCProto.IntVector|undefined} value
 * @return {!proto.TCProto.RandomReachablePositionReq} returns this
*/
proto.TCProto.RandomReachablePositionReq.prototype.setPosition = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TCProto.RandomReachablePositionReq} returns this
 */
proto.TCProto.RandomReachablePositionReq.prototype.clearPosition = function () {
    return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TCProto.RandomReachablePositionReq.prototype.hasPosition = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 radius = 2;
 * @return {number}
 */
proto.TCProto.RandomReachablePositionReq.prototype.getRadius = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.RandomReachablePositionReq} returns this
 */
proto.TCProto.RandomReachablePositionReq.prototype.setRadius = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelConfirmBeginReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelConfirmBeginReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelConfirmBeginReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelConfirmBeginReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            duration: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelConfirmBeginReq}
 */
proto.TCProto.PoetryDuelConfirmBeginReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelConfirmBeginReq;
    return proto.TCProto.PoetryDuelConfirmBeginReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelConfirmBeginReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelConfirmBeginReq}
 */
proto.TCProto.PoetryDuelConfirmBeginReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setDuration(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelConfirmBeginReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelConfirmBeginReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelConfirmBeginReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelConfirmBeginReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getDuration();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
};


/**
 * optional int32 duration = 1;
 * @return {number}
 */
proto.TCProto.PoetryDuelConfirmBeginReq.prototype.getDuration = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.PoetryDuelConfirmBeginReq} returns this
 */
proto.TCProto.PoetryDuelConfirmBeginReq.prototype.setDuration = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelSelectTopicReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelSelectTopicReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelSelectTopicReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelSelectTopicReq.toObject = function (includeInstance, msg) {
        var f, obj = {

        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelSelectTopicReq}
 */
proto.TCProto.PoetryDuelSelectTopicReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelSelectTopicReq;
    return proto.TCProto.PoetryDuelSelectTopicReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelSelectTopicReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelSelectTopicReq}
 */
proto.TCProto.PoetryDuelSelectTopicReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelSelectTopicReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelSelectTopicReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelSelectTopicReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelSelectTopicReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelLoadingReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelLoadingReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelLoadingReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelLoadingReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            scene: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelLoadingReq}
 */
proto.TCProto.PoetryDuelLoadingReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelLoadingReq;
    return proto.TCProto.PoetryDuelLoadingReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelLoadingReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelLoadingReq}
 */
proto.TCProto.PoetryDuelLoadingReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.TCProto.PoetryDuelLoadingScene} */ (reader.readEnum());
                msg.setScene(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelLoadingReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelLoadingReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelLoadingReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelLoadingReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getScene();
    if (f !== 0.0) {
        writer.writeEnum(
            1,
            f
        );
    }
};


/**
 * optional PoetryDuelLoadingScene scene = 1;
 * @return {!proto.TCProto.PoetryDuelLoadingScene}
 */
proto.TCProto.PoetryDuelLoadingReq.prototype.getScene = function () {
    return /** @type {!proto.TCProto.PoetryDuelLoadingScene} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.TCProto.PoetryDuelLoadingScene} value
 * @return {!proto.TCProto.PoetryDuelLoadingReq} returns this
 */
proto.TCProto.PoetryDuelLoadingReq.prototype.setScene = function (value) {
    return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TCProto.PoetryDuelShowPoemReq.repeatedFields_ = [3, 4];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelShowPoemReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelShowPoemReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelShowPoemReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelShowPoemReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            title: jspb.Message.getFieldWithDefault(msg, 1, ""),
            author: jspb.Message.getFieldWithDefault(msg, 2, ""),
            linesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
            backgroundsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelShowPoemReq}
 */
proto.TCProto.PoetryDuelShowPoemReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelShowPoemReq;
    return proto.TCProto.PoetryDuelShowPoemReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelShowPoemReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelShowPoemReq}
 */
proto.TCProto.PoetryDuelShowPoemReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setTitle(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setAuthor(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.addLines(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.addBackgrounds(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelShowPoemReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelShowPoemReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelShowPoemReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTitle();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getAuthor();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getLinesList();
    if (f.length > 0) {
        writer.writeRepeatedString(
            3,
            f
        );
    }
    f = message.getBackgroundsList();
    if (f.length > 0) {
        writer.writeRepeatedString(
            4,
            f
        );
    }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.getTitle = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TCProto.PoetryDuelShowPoemReq} returns this
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.setTitle = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string author = 2;
 * @return {string}
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.getAuthor = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TCProto.PoetryDuelShowPoemReq} returns this
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.setAuthor = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string lines = 3;
 * @return {!Array<string>}
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.getLinesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TCProto.PoetryDuelShowPoemReq} returns this
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.setLinesList = function (value) {
    return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelShowPoemReq} returns this
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.addLines = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.PoetryDuelShowPoemReq} returns this
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.clearLinesList = function () {
    return this.setLinesList([]);
};


/**
 * repeated string backgrounds = 4;
 * @return {!Array<string>}
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.getBackgroundsList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TCProto.PoetryDuelShowPoemReq} returns this
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.setBackgroundsList = function (value) {
    return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelShowPoemReq} returns this
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.addBackgrounds = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.PoetryDuelShowPoemReq} returns this
 */
proto.TCProto.PoetryDuelShowPoemReq.prototype.clearBackgroundsList = function () {
    return this.setBackgroundsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TCProto.PoetryDuelCreationReq.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelCreationReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelCreationReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelCreationReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelCreationReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            topic: jspb.Message.getFieldWithDefault(msg, 1, 0),
            lineIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
            optionsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelCreationReq}
 */
proto.TCProto.PoetryDuelCreationReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelCreationReq;
    return proto.TCProto.PoetryDuelCreationReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelCreationReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelCreationReq}
 */
proto.TCProto.PoetryDuelCreationReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.TCProto.PoetryDuelTopic} */ (reader.readEnum());
                msg.setTopic(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setLineIndex(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.addOptions(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelCreationReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelCreationReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelCreationReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelCreationReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTopic();
    if (f !== 0.0) {
        writer.writeEnum(
            1,
            f
        );
    }
    f = message.getLineIndex();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
    f = message.getOptionsList();
    if (f.length > 0) {
        writer.writeRepeatedString(
            3,
            f
        );
    }
};


/**
 * optional PoetryDuelTopic topic = 1;
 * @return {!proto.TCProto.PoetryDuelTopic}
 */
proto.TCProto.PoetryDuelCreationReq.prototype.getTopic = function () {
    return /** @type {!proto.TCProto.PoetryDuelTopic} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.TCProto.PoetryDuelTopic} value
 * @return {!proto.TCProto.PoetryDuelCreationReq} returns this
 */
proto.TCProto.PoetryDuelCreationReq.prototype.setTopic = function (value) {
    return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 line_index = 2;
 * @return {number}
 */
proto.TCProto.PoetryDuelCreationReq.prototype.getLineIndex = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.PoetryDuelCreationReq} returns this
 */
proto.TCProto.PoetryDuelCreationReq.prototype.setLineIndex = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string options = 3;
 * @return {!Array<string>}
 */
proto.TCProto.PoetryDuelCreationReq.prototype.getOptionsList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TCProto.PoetryDuelCreationReq} returns this
 */
proto.TCProto.PoetryDuelCreationReq.prototype.setOptionsList = function (value) {
    return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelCreationReq} returns this
 */
proto.TCProto.PoetryDuelCreationReq.prototype.addOptions = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.PoetryDuelCreationReq} returns this
 */
proto.TCProto.PoetryDuelCreationReq.prototype.clearOptionsList = function () {
    return this.setOptionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TCProto.PoetryDuelScoreReq.repeatedFields_ = [3, 6];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelScoreReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelScoreReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelScoreReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelScoreReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            title: jspb.Message.getFieldWithDefault(msg, 1, ""),
            author: jspb.Message.getFieldWithDefault(msg, 2, ""),
            linesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
            score: jspb.Message.getFieldWithDefault(msg, 4, 0),
            topic: jspb.Message.getFieldWithDefault(msg, 5, 0),
            lineTopicsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelScoreReq}
 */
proto.TCProto.PoetryDuelScoreReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelScoreReq;
    return proto.TCProto.PoetryDuelScoreReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelScoreReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelScoreReq}
 */
proto.TCProto.PoetryDuelScoreReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setTitle(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setAuthor(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.addLines(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setScore(value);
                break;
            case 5:
                var value = /** @type {!proto.TCProto.PoetryDuelTopic} */ (reader.readEnum());
                msg.setTopic(value);
                break;
            case 6:
                var values = /** @type {!Array<!proto.TCProto.PoetryDuelTopic>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
                for (var i = 0; i < values.length; i++) {
                    msg.addLineTopics(values[i]);
                }
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelScoreReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelScoreReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelScoreReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelScoreReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTitle();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getAuthor();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getLinesList();
    if (f.length > 0) {
        writer.writeRepeatedString(
            3,
            f
        );
    }
    f = message.getScore();
    if (f !== 0) {
        writer.writeInt32(
            4,
            f
        );
    }
    f = message.getTopic();
    if (f !== 0.0) {
        writer.writeEnum(
            5,
            f
        );
    }
    f = message.getLineTopicsList();
    if (f.length > 0) {
        writer.writePackedEnum(
            6,
            f
        );
    }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.TCProto.PoetryDuelScoreReq.prototype.getTitle = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TCProto.PoetryDuelScoreReq} returns this
 */
proto.TCProto.PoetryDuelScoreReq.prototype.setTitle = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string author = 2;
 * @return {string}
 */
proto.TCProto.PoetryDuelScoreReq.prototype.getAuthor = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TCProto.PoetryDuelScoreReq} returns this
 */
proto.TCProto.PoetryDuelScoreReq.prototype.setAuthor = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string lines = 3;
 * @return {!Array<string>}
 */
proto.TCProto.PoetryDuelScoreReq.prototype.getLinesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TCProto.PoetryDuelScoreReq} returns this
 */
proto.TCProto.PoetryDuelScoreReq.prototype.setLinesList = function (value) {
    return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelScoreReq} returns this
 */
proto.TCProto.PoetryDuelScoreReq.prototype.addLines = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.PoetryDuelScoreReq} returns this
 */
proto.TCProto.PoetryDuelScoreReq.prototype.clearLinesList = function () {
    return this.setLinesList([]);
};


/**
 * optional int32 score = 4;
 * @return {number}
 */
proto.TCProto.PoetryDuelScoreReq.prototype.getScore = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.PoetryDuelScoreReq} returns this
 */
proto.TCProto.PoetryDuelScoreReq.prototype.setScore = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional PoetryDuelTopic topic = 5;
 * @return {!proto.TCProto.PoetryDuelTopic}
 */
proto.TCProto.PoetryDuelScoreReq.prototype.getTopic = function () {
    return /** @type {!proto.TCProto.PoetryDuelTopic} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.TCProto.PoetryDuelTopic} value
 * @return {!proto.TCProto.PoetryDuelScoreReq} returns this
 */
proto.TCProto.PoetryDuelScoreReq.prototype.setTopic = function (value) {
    return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated PoetryDuelTopic line_topics = 6;
 * @return {!Array<!proto.TCProto.PoetryDuelTopic>}
 */
proto.TCProto.PoetryDuelScoreReq.prototype.getLineTopicsList = function () {
    return /** @type {!Array<!proto.TCProto.PoetryDuelTopic>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelTopic>} value
 * @return {!proto.TCProto.PoetryDuelScoreReq} returns this
 */
proto.TCProto.PoetryDuelScoreReq.prototype.setLineTopicsList = function (value) {
    return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.TCProto.PoetryDuelTopic} value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelScoreReq} returns this
 */
proto.TCProto.PoetryDuelScoreReq.prototype.addLineTopics = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.PoetryDuelScoreReq} returns this
 */
proto.TCProto.PoetryDuelScoreReq.prototype.clearLineTopicsList = function () {
    return this.setLineTopicsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelRecallModeReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelRecallModeReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelRecallModeReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelRecallModeReq.toObject = function (includeInstance, msg) {
        var f, obj = {

        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelRecallModeReq}
 */
proto.TCProto.PoetryDuelRecallModeReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelRecallModeReq;
    return proto.TCProto.PoetryDuelRecallModeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelRecallModeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelRecallModeReq}
 */
proto.TCProto.PoetryDuelRecallModeReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelRecallModeReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelRecallModeReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelRecallModeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelRecallModeReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelChatModeReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelChatModeReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelChatModeReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelChatModeReq.toObject = function (includeInstance, msg) {
        var f, obj = {

        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelChatModeReq}
 */
proto.TCProto.PoetryDuelChatModeReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelChatModeReq;
    return proto.TCProto.PoetryDuelChatModeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelChatModeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelChatModeReq}
 */
proto.TCProto.PoetryDuelChatModeReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelChatModeReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelChatModeReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelChatModeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelChatModeReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelEndReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelEndReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelEndReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelEndReq.toObject = function (includeInstance, msg) {
        var f, obj = {

        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelEndReq}
 */
proto.TCProto.PoetryDuelEndReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelEndReq;
    return proto.TCProto.PoetryDuelEndReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelEndReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelEndReq}
 */
proto.TCProto.PoetryDuelEndReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelEndReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelEndReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelEndReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelEndReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.ShowDistanceReq.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.ShowDistanceReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.ShowDistanceReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.ShowDistanceReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            playerId: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.ShowDistanceReq}
 */
proto.TCProto.ShowDistanceReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.ShowDistanceReq;
    return proto.TCProto.ShowDistanceReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.ShowDistanceReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.ShowDistanceReq}
 */
proto.TCProto.ShowDistanceReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPlayerId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.ShowDistanceReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.ShowDistanceReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.ShowDistanceReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.ShowDistanceReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.TCProto.ShowDistanceReq.prototype.getPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.ShowDistanceReq} returns this
 */
proto.TCProto.ShowDistanceReq.prototype.setPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.MoveAction.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.MoveAction.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.MoveAction} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.MoveAction.toObject = function (includeInstance, msg) {
        var f, obj = {
            playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            moveState: jspb.Message.getFieldWithDefault(msg, 2, 0),
            yaw: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.MoveAction}
 */
proto.TCProto.MoveAction.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.MoveAction;
    return proto.TCProto.MoveAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.MoveAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.MoveAction}
 */
proto.TCProto.MoveAction.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPlayerId(value);
                break;
            case 2:
                var value = /** @type {!proto.TCProto.MoveState} */ (reader.readEnum());
                msg.setMoveState(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setYaw(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.MoveAction.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.MoveAction.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.MoveAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.MoveAction.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getMoveState();
    if (f !== 0.0) {
        writer.writeEnum(
            2,
            f
        );
    }
    f = message.getYaw();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.TCProto.MoveAction.prototype.getPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.MoveAction} returns this
 */
proto.TCProto.MoveAction.prototype.setPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MoveState move_state = 2;
 * @return {!proto.TCProto.MoveState}
 */
proto.TCProto.MoveAction.prototype.getMoveState = function () {
    return /** @type {!proto.TCProto.MoveState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.TCProto.MoveState} value
 * @return {!proto.TCProto.MoveAction} returns this
 */
proto.TCProto.MoveAction.prototype.setMoveState = function (value) {
    return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 yaw = 3;
 * @return {number}
 */
proto.TCProto.MoveAction.prototype.getYaw = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.MoveAction} returns this
 */
proto.TCProto.MoveAction.prototype.setYaw = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.BubbleAction.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.BubbleAction.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.BubbleAction} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.BubbleAction.toObject = function (includeInstance, msg) {
        var f, obj = {
            playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            text: jspb.Message.getFieldWithDefault(msg, 2, ""),
            duration: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.BubbleAction}
 */
proto.TCProto.BubbleAction.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.BubbleAction;
    return proto.TCProto.BubbleAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.BubbleAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.BubbleAction}
 */
proto.TCProto.BubbleAction.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPlayerId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setText(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setDuration(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.BubbleAction.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.BubbleAction.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.BubbleAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.BubbleAction.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getText();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getDuration();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.TCProto.BubbleAction.prototype.getPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.BubbleAction} returns this
 */
proto.TCProto.BubbleAction.prototype.setPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.TCProto.BubbleAction.prototype.getText = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TCProto.BubbleAction} returns this
 */
proto.TCProto.BubbleAction.prototype.setText = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 duration = 3;
 * @return {number}
 */
proto.TCProto.BubbleAction.prototype.getDuration = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.BubbleAction} returns this
 */
proto.TCProto.BubbleAction.prototype.setDuration = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.TeleportAction.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.TeleportAction.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.TeleportAction} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.TeleportAction.toObject = function (includeInstance, msg) {
        var f, obj = {
            playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            position: (f = msg.getPosition()) && proto.TCProto.IntVector.toObject(includeInstance, f),
            yaw: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.TeleportAction}
 */
proto.TCProto.TeleportAction.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.TeleportAction;
    return proto.TCProto.TeleportAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.TeleportAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.TeleportAction}
 */
proto.TCProto.TeleportAction.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPlayerId(value);
                break;
            case 2:
                var value = new proto.TCProto.IntVector;
                reader.readMessage(value, proto.TCProto.IntVector.deserializeBinaryFromReader);
                msg.setPosition(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setYaw(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.TeleportAction.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.TeleportAction.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.TeleportAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.TeleportAction.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getPosition();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            proto.TCProto.IntVector.serializeBinaryToWriter
        );
    }
    f = message.getYaw();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.TCProto.TeleportAction.prototype.getPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.TeleportAction} returns this
 */
proto.TCProto.TeleportAction.prototype.setPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IntVector position = 2;
 * @return {?proto.TCProto.IntVector}
 */
proto.TCProto.TeleportAction.prototype.getPosition = function () {
    return /** @type{?proto.TCProto.IntVector} */ (
        jspb.Message.getWrapperField(this, proto.TCProto.IntVector, 2));
};


/**
 * @param {?proto.TCProto.IntVector|undefined} value
 * @return {!proto.TCProto.TeleportAction} returns this
*/
proto.TCProto.TeleportAction.prototype.setPosition = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TCProto.TeleportAction} returns this
 */
proto.TCProto.TeleportAction.prototype.clearPosition = function () {
    return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TCProto.TeleportAction.prototype.hasPosition = function () {
    return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 yaw = 3;
 * @return {number}
 */
proto.TCProto.TeleportAction.prototype.getYaw = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.TeleportAction} returns this
 */
proto.TCProto.TeleportAction.prototype.setYaw = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.AnimateAction.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.AnimateAction.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.AnimateAction} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.AnimateAction.toObject = function (includeInstance, msg) {
        var f, obj = {
            playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            animateState: jspb.Message.getFieldWithDefault(msg, 2, 0),
            isRepeat: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.AnimateAction}
 */
proto.TCProto.AnimateAction.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.AnimateAction;
    return proto.TCProto.AnimateAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.AnimateAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.AnimateAction}
 */
proto.TCProto.AnimateAction.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPlayerId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAnimateState(value);
                break;
            case 3:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setIsRepeat(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.AnimateAction.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.AnimateAction.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.AnimateAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.AnimateAction.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getAnimateState();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
    f = message.getIsRepeat();
    if (f) {
        writer.writeBool(
            3,
            f
        );
    }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.TCProto.AnimateAction.prototype.getPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.AnimateAction} returns this
 */
proto.TCProto.AnimateAction.prototype.setPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 animate_state = 2;
 * @return {number}
 */
proto.TCProto.AnimateAction.prototype.getAnimateState = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.AnimateAction} returns this
 */
proto.TCProto.AnimateAction.prototype.setAnimateState = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool is_repeat = 3;
 * @return {boolean}
 */
proto.TCProto.AnimateAction.prototype.getIsRepeat = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TCProto.AnimateAction} returns this
 */
proto.TCProto.AnimateAction.prototype.setIsRepeat = function (value) {
    return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.ChatAction.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.ChatAction.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.ChatAction} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.ChatAction.toObject = function (includeInstance, msg) {
        var f, obj = {
            playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            chattingPlayerId: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.ChatAction}
 */
proto.TCProto.ChatAction.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.ChatAction;
    return proto.TCProto.ChatAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.ChatAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.ChatAction}
 */
proto.TCProto.ChatAction.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPlayerId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setChattingPlayerId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.ChatAction.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.ChatAction.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.ChatAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.ChatAction.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getChattingPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.TCProto.ChatAction.prototype.getPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.ChatAction} returns this
 */
proto.TCProto.ChatAction.prototype.setPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 chatting_player_id = 2;
 * @return {number}
 */
proto.TCProto.ChatAction.prototype.getChattingPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.ChatAction} returns this
 */
proto.TCProto.ChatAction.prototype.setChattingPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.KeyPlotAction.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.KeyPlotAction.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.KeyPlotAction} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.KeyPlotAction.toObject = function (includeInstance, msg) {
        var f, obj = {
            playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            text: jspb.Message.getFieldWithDefault(msg, 2, ""),
            eventId: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.KeyPlotAction}
 */
proto.TCProto.KeyPlotAction.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.KeyPlotAction;
    return proto.TCProto.KeyPlotAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.KeyPlotAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.KeyPlotAction}
 */
proto.TCProto.KeyPlotAction.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPlayerId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setText(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setEventId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.KeyPlotAction.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.KeyPlotAction.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.KeyPlotAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.KeyPlotAction.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getText();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getEventId();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.TCProto.KeyPlotAction.prototype.getPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.KeyPlotAction} returns this
 */
proto.TCProto.KeyPlotAction.prototype.setPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.TCProto.KeyPlotAction.prototype.getText = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TCProto.KeyPlotAction} returns this
 */
proto.TCProto.KeyPlotAction.prototype.setText = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 event_id = 3;
 * @return {number}
 */
proto.TCProto.KeyPlotAction.prototype.getEventId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.KeyPlotAction} returns this
 */
proto.TCProto.KeyPlotAction.prototype.setEventId = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.MoveToAction.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.MoveToAction.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.MoveToAction} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.MoveToAction.toObject = function (includeInstance, msg) {
        var f, obj = {
            playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            position: (f = msg.getPosition()) && proto.TCProto.IntVector.toObject(includeInstance, f),
            yaw: jspb.Message.getFieldWithDefault(msg, 3, 0),
            abort: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
            moveState: jspb.Message.getFieldWithDefault(msg, 5, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.MoveToAction}
 */
proto.TCProto.MoveToAction.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.MoveToAction;
    return proto.TCProto.MoveToAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.MoveToAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.MoveToAction}
 */
proto.TCProto.MoveToAction.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPlayerId(value);
                break;
            case 2:
                var value = new proto.TCProto.IntVector;
                reader.readMessage(value, proto.TCProto.IntVector.deserializeBinaryFromReader);
                msg.setPosition(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setYaw(value);
                break;
            case 4:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setAbort(value);
                break;
            case 5:
                var value = /** @type {!proto.TCProto.MoveState} */ (reader.readEnum());
                msg.setMoveState(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.MoveToAction.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.MoveToAction.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.MoveToAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.MoveToAction.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getPosition();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            proto.TCProto.IntVector.serializeBinaryToWriter
        );
    }
    f = message.getYaw();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
    f = message.getAbort();
    if (f) {
        writer.writeBool(
            4,
            f
        );
    }
    f = message.getMoveState();
    if (f !== 0.0) {
        writer.writeEnum(
            5,
            f
        );
    }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.TCProto.MoveToAction.prototype.getPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.MoveToAction} returns this
 */
proto.TCProto.MoveToAction.prototype.setPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IntVector position = 2;
 * @return {?proto.TCProto.IntVector}
 */
proto.TCProto.MoveToAction.prototype.getPosition = function () {
    return /** @type{?proto.TCProto.IntVector} */ (
        jspb.Message.getWrapperField(this, proto.TCProto.IntVector, 2));
};


/**
 * @param {?proto.TCProto.IntVector|undefined} value
 * @return {!proto.TCProto.MoveToAction} returns this
*/
proto.TCProto.MoveToAction.prototype.setPosition = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TCProto.MoveToAction} returns this
 */
proto.TCProto.MoveToAction.prototype.clearPosition = function () {
    return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TCProto.MoveToAction.prototype.hasPosition = function () {
    return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 yaw = 3;
 * @return {number}
 */
proto.TCProto.MoveToAction.prototype.getYaw = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.MoveToAction} returns this
 */
proto.TCProto.MoveToAction.prototype.setYaw = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool abort = 4;
 * @return {boolean}
 */
proto.TCProto.MoveToAction.prototype.getAbort = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TCProto.MoveToAction} returns this
 */
proto.TCProto.MoveToAction.prototype.setAbort = function (value) {
    return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional MoveState move_state = 5;
 * @return {!proto.TCProto.MoveState}
 */
proto.TCProto.MoveToAction.prototype.getMoveState = function () {
    return /** @type {!proto.TCProto.MoveState} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.TCProto.MoveState} value
 * @return {!proto.TCProto.MoveToAction} returns this
 */
proto.TCProto.MoveToAction.prototype.setMoveState = function (value) {
    return jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TCProto.FromGame.repeatedFields_ = [1, 10, 20, 21, 30, 31, 32, 33, 34, 35];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.FromGame.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.FromGame.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.FromGame} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.FromGame.toObject = function (includeInstance, msg) {
        var f, obj = {
            playerStatesList: jspb.Message.toObjectList(msg.getPlayerStatesList(),
                proto.TCProto.PlayerState.toObject, includeInstance),
            solarTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
            isRaining: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
            randomReachablePositionRspsList: jspb.Message.toObjectList(msg.getRandomReachablePositionRspsList(),
                proto.TCProto.RandomReachablePositionRsp.toObject, includeInstance),
            finishMoveToPlayerIdsList: (f = jspb.Message.getRepeatedField(msg, 20)) == null ? undefined : f,
            humanControlledPlayerIdsList: (f = jspb.Message.getRepeatedField(msg, 21)) == null ? undefined : f,
            poetryDuelConfirmBeginRspsList: jspb.Message.toObjectList(msg.getPoetryDuelConfirmBeginRspsList(),
                proto.TCProto.PoetryDuelConfirmBeginRsp.toObject, includeInstance),
            poetryDuelSelectTopicRspsList: jspb.Message.toObjectList(msg.getPoetryDuelSelectTopicRspsList(),
                proto.TCProto.PoetryDuelSelectTopicRsp.toObject, includeInstance),
            poetryDuelLoadingRspsList: jspb.Message.toObjectList(msg.getPoetryDuelLoadingRspsList(),
                proto.TCProto.PoetryDuelLoadingRsp.toObject, includeInstance),
            poetryDuelShowPoemRspsList: jspb.Message.toObjectList(msg.getPoetryDuelShowPoemRspsList(),
                proto.TCProto.PoetryDuelShowPoemRsp.toObject, includeInstance),
            poetryDuelCreationRspsList: jspb.Message.toObjectList(msg.getPoetryDuelCreationRspsList(),
                proto.TCProto.PoetryDuelCreationRsp.toObject, includeInstance),
            poetryDuelScoreRspsList: jspb.Message.toObjectList(msg.getPoetryDuelScoreRspsList(),
                proto.TCProto.PoetryDuelScoreRsp.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.FromGame}
 */
proto.TCProto.FromGame.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.FromGame;
    return proto.TCProto.FromGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.FromGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.FromGame}
 */
proto.TCProto.FromGame.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.TCProto.PlayerState;
                reader.readMessage(value, proto.TCProto.PlayerState.deserializeBinaryFromReader);
                msg.addPlayerStates(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readFloat());
                msg.setSolarTime(value);
                break;
            case 3:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setIsRaining(value);
                break;
            case 10:
                var value = new proto.TCProto.RandomReachablePositionRsp;
                reader.readMessage(value, proto.TCProto.RandomReachablePositionRsp.deserializeBinaryFromReader);
                msg.addRandomReachablePositionRsps(value);
                break;
            case 20:
                var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
                for (var i = 0; i < values.length; i++) {
                    msg.addFinishMoveToPlayerIds(values[i]);
                }
                break;
            case 21:
                var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
                for (var i = 0; i < values.length; i++) {
                    msg.addHumanControlledPlayerIds(values[i]);
                }
                break;
            case 30:
                var value = new proto.TCProto.PoetryDuelConfirmBeginRsp;
                reader.readMessage(value, proto.TCProto.PoetryDuelConfirmBeginRsp.deserializeBinaryFromReader);
                msg.addPoetryDuelConfirmBeginRsps(value);
                break;
            case 31:
                var value = new proto.TCProto.PoetryDuelSelectTopicRsp;
                reader.readMessage(value, proto.TCProto.PoetryDuelSelectTopicRsp.deserializeBinaryFromReader);
                msg.addPoetryDuelSelectTopicRsps(value);
                break;
            case 32:
                var value = new proto.TCProto.PoetryDuelLoadingRsp;
                reader.readMessage(value, proto.TCProto.PoetryDuelLoadingRsp.deserializeBinaryFromReader);
                msg.addPoetryDuelLoadingRsps(value);
                break;
            case 33:
                var value = new proto.TCProto.PoetryDuelShowPoemRsp;
                reader.readMessage(value, proto.TCProto.PoetryDuelShowPoemRsp.deserializeBinaryFromReader);
                msg.addPoetryDuelShowPoemRsps(value);
                break;
            case 34:
                var value = new proto.TCProto.PoetryDuelCreationRsp;
                reader.readMessage(value, proto.TCProto.PoetryDuelCreationRsp.deserializeBinaryFromReader);
                msg.addPoetryDuelCreationRsps(value);
                break;
            case 35:
                var value = new proto.TCProto.PoetryDuelScoreRsp;
                reader.readMessage(value, proto.TCProto.PoetryDuelScoreRsp.deserializeBinaryFromReader);
                msg.addPoetryDuelScoreRsps(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.FromGame.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.FromGame.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.FromGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.FromGame.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPlayerStatesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.TCProto.PlayerState.serializeBinaryToWriter
        );
    }
    f = message.getSolarTime();
    if (f !== 0.0) {
        writer.writeFloat(
            2,
            f
        );
    }
    f = message.getIsRaining();
    if (f) {
        writer.writeBool(
            3,
            f
        );
    }
    f = message.getRandomReachablePositionRspsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            10,
            f,
            proto.TCProto.RandomReachablePositionRsp.serializeBinaryToWriter
        );
    }
    f = message.getFinishMoveToPlayerIdsList();
    if (f.length > 0) {
        writer.writePackedInt32(
            20,
            f
        );
    }
    f = message.getHumanControlledPlayerIdsList();
    if (f.length > 0) {
        writer.writePackedInt32(
            21,
            f
        );
    }
    f = message.getPoetryDuelConfirmBeginRspsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            30,
            f,
            proto.TCProto.PoetryDuelConfirmBeginRsp.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelSelectTopicRspsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            31,
            f,
            proto.TCProto.PoetryDuelSelectTopicRsp.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelLoadingRspsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            32,
            f,
            proto.TCProto.PoetryDuelLoadingRsp.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelShowPoemRspsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            33,
            f,
            proto.TCProto.PoetryDuelShowPoemRsp.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelCreationRspsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            34,
            f,
            proto.TCProto.PoetryDuelCreationRsp.serializeBinaryToWriter
        );
    }
    f = message.getPoetryDuelScoreRspsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            35,
            f,
            proto.TCProto.PoetryDuelScoreRsp.serializeBinaryToWriter
        );
    }
};


/**
 * repeated PlayerState player_states = 1;
 * @return {!Array<!proto.TCProto.PlayerState>}
 */
proto.TCProto.FromGame.prototype.getPlayerStatesList = function () {
    return /** @type{!Array<!proto.TCProto.PlayerState>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PlayerState, 1));
};


/**
 * @param {!Array<!proto.TCProto.PlayerState>} value
 * @return {!proto.TCProto.FromGame} returns this
*/
proto.TCProto.FromGame.prototype.setPlayerStatesList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TCProto.PlayerState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PlayerState}
 */
proto.TCProto.FromGame.prototype.addPlayerStates = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TCProto.PlayerState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.clearPlayerStatesList = function () {
    return this.setPlayerStatesList([]);
};


/**
 * optional float solar_time = 2;
 * @return {number}
 */
proto.TCProto.FromGame.prototype.getSolarTime = function () {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.setSolarTime = function (value) {
    return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool is_raining = 3;
 * @return {boolean}
 */
proto.TCProto.FromGame.prototype.getIsRaining = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.setIsRaining = function (value) {
    return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated RandomReachablePositionRsp random_reachable_position_rsps = 10;
 * @return {!Array<!proto.TCProto.RandomReachablePositionRsp>}
 */
proto.TCProto.FromGame.prototype.getRandomReachablePositionRspsList = function () {
    return /** @type{!Array<!proto.TCProto.RandomReachablePositionRsp>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.RandomReachablePositionRsp, 10));
};


/**
 * @param {!Array<!proto.TCProto.RandomReachablePositionRsp>} value
 * @return {!proto.TCProto.FromGame} returns this
*/
proto.TCProto.FromGame.prototype.setRandomReachablePositionRspsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.TCProto.RandomReachablePositionRsp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.RandomReachablePositionRsp}
 */
proto.TCProto.FromGame.prototype.addRandomReachablePositionRsps = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.TCProto.RandomReachablePositionRsp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.clearRandomReachablePositionRspsList = function () {
    return this.setRandomReachablePositionRspsList([]);
};


/**
 * repeated int32 finish_move_to_player_ids = 20;
 * @return {!Array<number>}
 */
proto.TCProto.FromGame.prototype.getFinishMoveToPlayerIdsList = function () {
    return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 20));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.setFinishMoveToPlayerIdsList = function (value) {
    return jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.addFinishMoveToPlayerIds = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.clearFinishMoveToPlayerIdsList = function () {
    return this.setFinishMoveToPlayerIdsList([]);
};


/**
 * repeated int32 human_controlled_player_ids = 21;
 * @return {!Array<number>}
 */
proto.TCProto.FromGame.prototype.getHumanControlledPlayerIdsList = function () {
    return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 21));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.setHumanControlledPlayerIdsList = function (value) {
    return jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.addHumanControlledPlayerIds = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.clearHumanControlledPlayerIdsList = function () {
    return this.setHumanControlledPlayerIdsList([]);
};


/**
 * repeated PoetryDuelConfirmBeginRsp poetry_duel_confirm_begin_rsps = 30;
 * @return {!Array<!proto.TCProto.PoetryDuelConfirmBeginRsp>}
 */
proto.TCProto.FromGame.prototype.getPoetryDuelConfirmBeginRspsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelConfirmBeginRsp>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelConfirmBeginRsp, 30));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelConfirmBeginRsp>} value
 * @return {!proto.TCProto.FromGame} returns this
*/
proto.TCProto.FromGame.prototype.setPoetryDuelConfirmBeginRspsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 30, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelConfirmBeginRsp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelConfirmBeginRsp}
 */
proto.TCProto.FromGame.prototype.addPoetryDuelConfirmBeginRsps = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 30, opt_value, proto.TCProto.PoetryDuelConfirmBeginRsp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.clearPoetryDuelConfirmBeginRspsList = function () {
    return this.setPoetryDuelConfirmBeginRspsList([]);
};


/**
 * repeated PoetryDuelSelectTopicRsp poetry_duel_select_topic_rsps = 31;
 * @return {!Array<!proto.TCProto.PoetryDuelSelectTopicRsp>}
 */
proto.TCProto.FromGame.prototype.getPoetryDuelSelectTopicRspsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelSelectTopicRsp>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelSelectTopicRsp, 31));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelSelectTopicRsp>} value
 * @return {!proto.TCProto.FromGame} returns this
*/
proto.TCProto.FromGame.prototype.setPoetryDuelSelectTopicRspsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 31, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelSelectTopicRsp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelSelectTopicRsp}
 */
proto.TCProto.FromGame.prototype.addPoetryDuelSelectTopicRsps = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 31, opt_value, proto.TCProto.PoetryDuelSelectTopicRsp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.clearPoetryDuelSelectTopicRspsList = function () {
    return this.setPoetryDuelSelectTopicRspsList([]);
};


/**
 * repeated PoetryDuelLoadingRsp poetry_duel_loading_rsps = 32;
 * @return {!Array<!proto.TCProto.PoetryDuelLoadingRsp>}
 */
proto.TCProto.FromGame.prototype.getPoetryDuelLoadingRspsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelLoadingRsp>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelLoadingRsp, 32));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelLoadingRsp>} value
 * @return {!proto.TCProto.FromGame} returns this
*/
proto.TCProto.FromGame.prototype.setPoetryDuelLoadingRspsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 32, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelLoadingRsp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelLoadingRsp}
 */
proto.TCProto.FromGame.prototype.addPoetryDuelLoadingRsps = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 32, opt_value, proto.TCProto.PoetryDuelLoadingRsp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.clearPoetryDuelLoadingRspsList = function () {
    return this.setPoetryDuelLoadingRspsList([]);
};


/**
 * repeated PoetryDuelShowPoemRsp poetry_duel_show_poem_rsps = 33;
 * @return {!Array<!proto.TCProto.PoetryDuelShowPoemRsp>}
 */
proto.TCProto.FromGame.prototype.getPoetryDuelShowPoemRspsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelShowPoemRsp>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelShowPoemRsp, 33));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelShowPoemRsp>} value
 * @return {!proto.TCProto.FromGame} returns this
*/
proto.TCProto.FromGame.prototype.setPoetryDuelShowPoemRspsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 33, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelShowPoemRsp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelShowPoemRsp}
 */
proto.TCProto.FromGame.prototype.addPoetryDuelShowPoemRsps = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 33, opt_value, proto.TCProto.PoetryDuelShowPoemRsp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.clearPoetryDuelShowPoemRspsList = function () {
    return this.setPoetryDuelShowPoemRspsList([]);
};


/**
 * repeated PoetryDuelCreationRsp poetry_duel_creation_rsps = 34;
 * @return {!Array<!proto.TCProto.PoetryDuelCreationRsp>}
 */
proto.TCProto.FromGame.prototype.getPoetryDuelCreationRspsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelCreationRsp>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelCreationRsp, 34));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelCreationRsp>} value
 * @return {!proto.TCProto.FromGame} returns this
*/
proto.TCProto.FromGame.prototype.setPoetryDuelCreationRspsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 34, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelCreationRsp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelCreationRsp}
 */
proto.TCProto.FromGame.prototype.addPoetryDuelCreationRsps = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 34, opt_value, proto.TCProto.PoetryDuelCreationRsp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.clearPoetryDuelCreationRspsList = function () {
    return this.setPoetryDuelCreationRspsList([]);
};


/**
 * repeated PoetryDuelScoreRsp poetry_duel_score_rsps = 35;
 * @return {!Array<!proto.TCProto.PoetryDuelScoreRsp>}
 */
proto.TCProto.FromGame.prototype.getPoetryDuelScoreRspsList = function () {
    return /** @type{!Array<!proto.TCProto.PoetryDuelScoreRsp>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.TCProto.PoetryDuelScoreRsp, 35));
};


/**
 * @param {!Array<!proto.TCProto.PoetryDuelScoreRsp>} value
 * @return {!proto.TCProto.FromGame} returns this
*/
proto.TCProto.FromGame.prototype.setPoetryDuelScoreRspsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 35, value);
};


/**
 * @param {!proto.TCProto.PoetryDuelScoreRsp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PoetryDuelScoreRsp}
 */
proto.TCProto.FromGame.prototype.addPoetryDuelScoreRsps = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 35, opt_value, proto.TCProto.PoetryDuelScoreRsp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.FromGame} returns this
 */
proto.TCProto.FromGame.prototype.clearPoetryDuelScoreRspsList = function () {
    return this.setPoetryDuelScoreRspsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TCProto.PlayerState.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PlayerState.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PlayerState.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PlayerState} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PlayerState.toObject = function (includeInstance, msg) {
        var f, obj = {
            playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            position: (f = msg.getPosition()) && proto.TCProto.IntVector.toObject(includeInstance, f),
            moveState: jspb.Message.getFieldWithDefault(msg, 3, 0),
            yaw: jspb.Message.getFieldWithDefault(msg, 4, 0),
            bubbleText: jspb.Message.getFieldWithDefault(msg, 5, ""),
            animateState: jspb.Message.getFieldWithDefault(msg, 6, 0),
            chattingPlayerId: jspb.Message.getFieldWithDefault(msg, 7, 0),
            nearbyPlayerIdsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
            moveToInProgress: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PlayerState}
 */
proto.TCProto.PlayerState.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PlayerState;
    return proto.TCProto.PlayerState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PlayerState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PlayerState}
 */
proto.TCProto.PlayerState.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPlayerId(value);
                break;
            case 2:
                var value = new proto.TCProto.IntVector;
                reader.readMessage(value, proto.TCProto.IntVector.deserializeBinaryFromReader);
                msg.setPosition(value);
                break;
            case 3:
                var value = /** @type {!proto.TCProto.MoveState} */ (reader.readEnum());
                msg.setMoveState(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setYaw(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setBubbleText(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAnimateState(value);
                break;
            case 7:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setChattingPlayerId(value);
                break;
            case 8:
                var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
                for (var i = 0; i < values.length; i++) {
                    msg.addNearbyPlayerIds(values[i]);
                }
                break;
            case 9:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setMoveToInProgress(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PlayerState.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PlayerState.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PlayerState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PlayerState.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getPosition();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            proto.TCProto.IntVector.serializeBinaryToWriter
        );
    }
    f = message.getMoveState();
    if (f !== 0.0) {
        writer.writeEnum(
            3,
            f
        );
    }
    f = message.getYaw();
    if (f !== 0) {
        writer.writeInt32(
            4,
            f
        );
    }
    f = message.getBubbleText();
    if (f.length > 0) {
        writer.writeString(
            5,
            f
        );
    }
    f = message.getAnimateState();
    if (f !== 0) {
        writer.writeInt32(
            6,
            f
        );
    }
    f = message.getChattingPlayerId();
    if (f !== 0) {
        writer.writeInt32(
            7,
            f
        );
    }
    f = message.getNearbyPlayerIdsList();
    if (f.length > 0) {
        writer.writePackedInt32(
            8,
            f
        );
    }
    f = message.getMoveToInProgress();
    if (f) {
        writer.writeBool(
            9,
            f
        );
    }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.TCProto.PlayerState.prototype.getPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.PlayerState} returns this
 */
proto.TCProto.PlayerState.prototype.setPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IntVector position = 2;
 * @return {?proto.TCProto.IntVector}
 */
proto.TCProto.PlayerState.prototype.getPosition = function () {
    return /** @type{?proto.TCProto.IntVector} */ (
        jspb.Message.getWrapperField(this, proto.TCProto.IntVector, 2));
};


/**
 * @param {?proto.TCProto.IntVector|undefined} value
 * @return {!proto.TCProto.PlayerState} returns this
*/
proto.TCProto.PlayerState.prototype.setPosition = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TCProto.PlayerState} returns this
 */
proto.TCProto.PlayerState.prototype.clearPosition = function () {
    return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TCProto.PlayerState.prototype.hasPosition = function () {
    return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MoveState move_state = 3;
 * @return {!proto.TCProto.MoveState}
 */
proto.TCProto.PlayerState.prototype.getMoveState = function () {
    return /** @type {!proto.TCProto.MoveState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.TCProto.MoveState} value
 * @return {!proto.TCProto.PlayerState} returns this
 */
proto.TCProto.PlayerState.prototype.setMoveState = function (value) {
    return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 yaw = 4;
 * @return {number}
 */
proto.TCProto.PlayerState.prototype.getYaw = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.PlayerState} returns this
 */
proto.TCProto.PlayerState.prototype.setYaw = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string bubble_text = 5;
 * @return {string}
 */
proto.TCProto.PlayerState.prototype.getBubbleText = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.TCProto.PlayerState} returns this
 */
proto.TCProto.PlayerState.prototype.setBubbleText = function (value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 animate_state = 6;
 * @return {number}
 */
proto.TCProto.PlayerState.prototype.getAnimateState = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.PlayerState} returns this
 */
proto.TCProto.PlayerState.prototype.setAnimateState = function (value) {
    return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 chatting_player_id = 7;
 * @return {number}
 */
proto.TCProto.PlayerState.prototype.getChattingPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.PlayerState} returns this
 */
proto.TCProto.PlayerState.prototype.setChattingPlayerId = function (value) {
    return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated int32 nearby_player_ids = 8;
 * @return {!Array<number>}
 */
proto.TCProto.PlayerState.prototype.getNearbyPlayerIdsList = function () {
    return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.TCProto.PlayerState} returns this
 */
proto.TCProto.PlayerState.prototype.setNearbyPlayerIdsList = function (value) {
    return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.TCProto.PlayerState} returns this
 */
proto.TCProto.PlayerState.prototype.addNearbyPlayerIds = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TCProto.PlayerState} returns this
 */
proto.TCProto.PlayerState.prototype.clearNearbyPlayerIdsList = function () {
    return this.setNearbyPlayerIdsList([]);
};


/**
 * optional bool move_to_in_progress = 9;
 * @return {boolean}
 */
proto.TCProto.PlayerState.prototype.getMoveToInProgress = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TCProto.PlayerState} returns this
 */
proto.TCProto.PlayerState.prototype.setMoveToInProgress = function (value) {
    return jspb.Message.setProto3BooleanField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.RandomReachablePositionRsp.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.RandomReachablePositionRsp.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.RandomReachablePositionRsp} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.RandomReachablePositionRsp.toObject = function (includeInstance, msg) {
        var f, obj = {
            position: (f = msg.getPosition()) && proto.TCProto.IntVector.toObject(includeInstance, f),
            isFail: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.RandomReachablePositionRsp}
 */
proto.TCProto.RandomReachablePositionRsp.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.RandomReachablePositionRsp;
    return proto.TCProto.RandomReachablePositionRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.RandomReachablePositionRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.RandomReachablePositionRsp}
 */
proto.TCProto.RandomReachablePositionRsp.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.TCProto.IntVector;
                reader.readMessage(value, proto.TCProto.IntVector.deserializeBinaryFromReader);
                msg.setPosition(value);
                break;
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setIsFail(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.RandomReachablePositionRsp.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.RandomReachablePositionRsp.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.RandomReachablePositionRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.RandomReachablePositionRsp.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPosition();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.TCProto.IntVector.serializeBinaryToWriter
        );
    }
    f = message.getIsFail();
    if (f) {
        writer.writeBool(
            2,
            f
        );
    }
};


/**
 * optional IntVector position = 1;
 * @return {?proto.TCProto.IntVector}
 */
proto.TCProto.RandomReachablePositionRsp.prototype.getPosition = function () {
    return /** @type{?proto.TCProto.IntVector} */ (
        jspb.Message.getWrapperField(this, proto.TCProto.IntVector, 1));
};


/**
 * @param {?proto.TCProto.IntVector|undefined} value
 * @return {!proto.TCProto.RandomReachablePositionRsp} returns this
*/
proto.TCProto.RandomReachablePositionRsp.prototype.setPosition = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TCProto.RandomReachablePositionRsp} returns this
 */
proto.TCProto.RandomReachablePositionRsp.prototype.clearPosition = function () {
    return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TCProto.RandomReachablePositionRsp.prototype.hasPosition = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_fail = 2;
 * @return {boolean}
 */
proto.TCProto.RandomReachablePositionRsp.prototype.getIsFail = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TCProto.RandomReachablePositionRsp} returns this
 */
proto.TCProto.RandomReachablePositionRsp.prototype.setIsFail = function (value) {
    return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelConfirmBeginRsp.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelConfirmBeginRsp.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelConfirmBeginRsp} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelConfirmBeginRsp.toObject = function (includeInstance, msg) {
        var f, obj = {
            confirm: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelConfirmBeginRsp}
 */
proto.TCProto.PoetryDuelConfirmBeginRsp.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelConfirmBeginRsp;
    return proto.TCProto.PoetryDuelConfirmBeginRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelConfirmBeginRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelConfirmBeginRsp}
 */
proto.TCProto.PoetryDuelConfirmBeginRsp.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setConfirm(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelConfirmBeginRsp.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelConfirmBeginRsp.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelConfirmBeginRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelConfirmBeginRsp.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getConfirm();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
};


/**
 * optional bool confirm = 1;
 * @return {boolean}
 */
proto.TCProto.PoetryDuelConfirmBeginRsp.prototype.getConfirm = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TCProto.PoetryDuelConfirmBeginRsp} returns this
 */
proto.TCProto.PoetryDuelConfirmBeginRsp.prototype.setConfirm = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelSelectTopicRsp.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelSelectTopicRsp.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelSelectTopicRsp} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelSelectTopicRsp.toObject = function (includeInstance, msg) {
        var f, obj = {
            topic: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelSelectTopicRsp}
 */
proto.TCProto.PoetryDuelSelectTopicRsp.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelSelectTopicRsp;
    return proto.TCProto.PoetryDuelSelectTopicRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelSelectTopicRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelSelectTopicRsp}
 */
proto.TCProto.PoetryDuelSelectTopicRsp.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.TCProto.PoetryDuelTopic} */ (reader.readEnum());
                msg.setTopic(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelSelectTopicRsp.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelSelectTopicRsp.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelSelectTopicRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelSelectTopicRsp.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTopic();
    if (f !== 0.0) {
        writer.writeEnum(
            1,
            f
        );
    }
};


/**
 * optional PoetryDuelTopic topic = 1;
 * @return {!proto.TCProto.PoetryDuelTopic}
 */
proto.TCProto.PoetryDuelSelectTopicRsp.prototype.getTopic = function () {
    return /** @type {!proto.TCProto.PoetryDuelTopic} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.TCProto.PoetryDuelTopic} value
 * @return {!proto.TCProto.PoetryDuelSelectTopicRsp} returns this
 */
proto.TCProto.PoetryDuelSelectTopicRsp.prototype.setTopic = function (value) {
    return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelLoadingRsp.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelLoadingRsp.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelLoadingRsp} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelLoadingRsp.toObject = function (includeInstance, msg) {
        var f, obj = {

        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelLoadingRsp}
 */
proto.TCProto.PoetryDuelLoadingRsp.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelLoadingRsp;
    return proto.TCProto.PoetryDuelLoadingRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelLoadingRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelLoadingRsp}
 */
proto.TCProto.PoetryDuelLoadingRsp.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelLoadingRsp.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelLoadingRsp.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelLoadingRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelLoadingRsp.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelShowPoemRsp.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelShowPoemRsp.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelShowPoemRsp} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelShowPoemRsp.toObject = function (includeInstance, msg) {
        var f, obj = {

        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelShowPoemRsp}
 */
proto.TCProto.PoetryDuelShowPoemRsp.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelShowPoemRsp;
    return proto.TCProto.PoetryDuelShowPoemRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelShowPoemRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelShowPoemRsp}
 */
proto.TCProto.PoetryDuelShowPoemRsp.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelShowPoemRsp.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelShowPoemRsp.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelShowPoemRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelShowPoemRsp.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelCreationRsp.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelCreationRsp.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelCreationRsp} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelCreationRsp.toObject = function (includeInstance, msg) {
        var f, obj = {
            option: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelCreationRsp}
 */
proto.TCProto.PoetryDuelCreationRsp.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelCreationRsp;
    return proto.TCProto.PoetryDuelCreationRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelCreationRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelCreationRsp}
 */
proto.TCProto.PoetryDuelCreationRsp.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setOption(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelCreationRsp.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelCreationRsp.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelCreationRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelCreationRsp.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getOption();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
};


/**
 * optional int32 option = 1;
 * @return {number}
 */
proto.TCProto.PoetryDuelCreationRsp.prototype.getOption = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TCProto.PoetryDuelCreationRsp} returns this
 */
proto.TCProto.PoetryDuelCreationRsp.prototype.setOption = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TCProto.PoetryDuelScoreRsp.prototype.toObject = function (opt_includeInstance) {
        return proto.TCProto.PoetryDuelScoreRsp.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TCProto.PoetryDuelScoreRsp} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TCProto.PoetryDuelScoreRsp.toObject = function (includeInstance, msg) {
        var f, obj = {

        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TCProto.PoetryDuelScoreRsp}
 */
proto.TCProto.PoetryDuelScoreRsp.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TCProto.PoetryDuelScoreRsp;
    return proto.TCProto.PoetryDuelScoreRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TCProto.PoetryDuelScoreRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TCProto.PoetryDuelScoreRsp}
 */
proto.TCProto.PoetryDuelScoreRsp.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TCProto.PoetryDuelScoreRsp.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TCProto.PoetryDuelScoreRsp.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TCProto.PoetryDuelScoreRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TCProto.PoetryDuelScoreRsp.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};


/**
 * @enum {number}
 */
proto.TCProto.MoveState = {
    STOP: 0,
    WALK: 1,
    RUN: 2,
    SPRINT: 3
};

/**
 * @enum {number}
 */
proto.TCProto.PoetryDuelLoadingScene = {
    LOADING_DEFAULT: 0,
    LOADING_SHOW_POEM: 1,
    LOADING_RECALL_BEGIN: 2,
    LAODING_RECALL_END: 3
};

/**
 * @enum {number}
 */
proto.TCProto.PoetryDuelTopic = {
    TOPIC_INVALID: 0,
    TOPIC_FAREWELL: 1,
    TOPIC_SCENERY: 2,
    TOPIC_LIFE: 3
};

goog.object.extend(exports, proto.TCProto);
